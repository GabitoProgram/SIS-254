# -*- coding: utf-8 -*-
"""seidel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RxuyzNQQfZ-su8fC-fqCHQ5TTtWiUrfe
"""

import numpy as np

# Definimos el sistema de ecuaciones como una matriz A y un vector b
A = np.array([[52, 20, 25],
              [30, 50, 20],
              [18, 30, 55]], dtype=float)

b = np.array([4800, 5810, 5690], dtype=float)

# Valores iniciales para x1, x2, x3
x = np.zeros(3)

# Definir el número máximo de iteraciones y la tolerancia
max_iterations = 1000
tolerance = 1e-10

# Método de Gauss-Seidel
def gauss_seidel(A, b, x, max_iterations, tolerance):
    n = len(b)
    for k in range(max_iterations):
        x_old = np.copy(x)

        for i in range(n):
            sum_ = sum(A[i][j] * x[j] for j in range(n) if j != i)
            x[i] = (b[i] - sum_) / A[i][i]

        # Verificar si la solución converge
        if np.allclose(x, x_old, atol=tolerance):
            print(f'Convergió después de {k+1} iteraciones')
            return x

    print('No convergió dentro del número máximo de iteraciones')
    return x

# Resolver el sistema
sol = gauss_seidel(A, b, x, max_iterations, tolerance)

print("Solución: ")
print(f"x1 (cantera 1): {sol[0]}")
print(f"x2 (cantera 2): {sol[1]}")
print(f"x3 (cantera 3): {sol[2]}")